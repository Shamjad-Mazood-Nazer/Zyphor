# Generated by Django 4.1.7 on 2023-04-03 07:11

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AikenFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255, verbose_name='Quiz Name')),
                ('uploaded_on', models.DateField(auto_now_add=True, verbose_name='Upload Date')),
                ('file', models.FileField(default='', upload_to='files', verbose_name='File')),
                ('time', models.CharField(default='10', max_length=10, verbose_name='Time(Minutes)')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(verbose_name='End Date')),
            ],
            options={
                'verbose_name_plural': 'Aiken Quiz',
            },
        ),
        migrations.CreateModel(
            name='AikenQuizFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Quiz Name')),
                ('uploaded_on', models.DateField(auto_now_add=True, verbose_name='Upload Date')),
                ('file', models.FileField(default='', upload_to='files', verbose_name='File')),
                ('time', models.CharField(default='10', max_length=10, verbose_name='Time(Minutes)')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(verbose_name='End Date')),
            ],
            options={
                'verbose_name_plural': 'Aiken Quiz File',
            },
        ),
        migrations.CreateModel(
            name='ApplyDrive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=100)),
                ('full_name', models.CharField(max_length=50)),
                ('job_name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Students Applied',
            },
        ),
        migrations.CreateModel(
            name='Drives',
            fields=[
                ('drive_id', models.IntegerField(primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=50)),
                ('salary_package', models.CharField(max_length=10)),
                ('description', models.TextField(blank=True)),
                ('last_date', models.DateField()),
                ('status', models.BooleanField()),
            ],
            options={
                'verbose_name_plural': 'Company Details',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('payment_on', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('paid', 'paid'), ('not paid', 'not paid')], default='Not Paid', max_length=25)),
            ],
            options={
                'verbose_name_plural': 'Payment Table',
            },
        ),
        migrations.CreateModel(
            name='QuesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=200, null=True)),
                ('op1', models.CharField(max_length=200, null=True)),
                ('op2', models.CharField(max_length=200, null=True)),
                ('op3', models.CharField(max_length=200, null=True)),
                ('op4', models.CharField(max_length=200, null=True)),
                ('ans', models.CharField(max_length=200, null=True)),
                ('explanation', models.TextField(default='')),
            ],
            options={
                'verbose_name_plural': 'Quick Test',
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Quiz',
            },
        ),
        migrations.CreateModel(
            name='QuizResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(default=0, max_length=70)),
                ('score', models.CharField(default=0, max_length=3)),
                ('time', models.CharField(default=0, max_length=4)),
                ('correct', models.CharField(default=0, max_length=3)),
                ('wrong', models.CharField(default=0, max_length=3)),
                ('percent', models.CharField(default=0, max_length=3)),
                ('total', models.CharField(default=0, max_length=3, verbose_name='total questions')),
                ('quiz_taken_on', models.DateTimeField(auto_now_add=True, verbose_name='Date & Time')),
            ],
            options={
                'verbose_name_plural': 'Quiz - Result',
            },
        ),
        migrations.CreateModel(
            name='StudentReg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admino', models.CharField(max_length=255, unique=True)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=500, unique=True)),
                ('password', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Registration table',
            },
        ),
        migrations.CreateModel(
            name='Tpo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tpoName', models.CharField(max_length=50)),
                ('tpoMail', models.EmailField(max_length=75)),
                ('tpoPassword', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Quiz_Counter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=255, verbose_name='email')),
                ('counter', models.IntegerField(default=1, verbose_name='counter')),
                ('quiz_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campus.quiz', verbose_name='quiz id')),
            ],
            options={
                'verbose_name_plural': 'Quiz Counter',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('correct_answer', models.CharField(max_length=255)),
                ('explanation', models.TextField()),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campus.quiz')),
            ],
            options={
                'verbose_name_plural': 'Questions',
            },
        ),
        migrations.CreateModel(
            name='MCAStudentDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('universityReg', models.CharField(max_length=13, verbose_name='KTU register number')),
                ('branch', models.CharField(choices=[('mca', 'MCA'), ('intmca', 'INT MCA')], max_length=50, verbose_name='Programme')),
                ('DoB', models.DateField(max_length=10, verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('male', 'male'), ('female', 'female')], max_length=6, verbose_name='Gender')),
                ('mobileNoIndian', models.CharField(max_length=10, verbose_name='Primary Mobile')),
                ('alternativeNo', models.CharField(max_length=15, verbose_name='Alternative Mobile')),
                ('collegeMail', models.CharField(max_length=200, verbose_name='College Mail')),
                ('fatherName', models.CharField(max_length=50, verbose_name="Father's Name")),
                ('fatherNo', models.CharField(max_length=15, verbose_name="Father's Mobile")),
                ('motherName', models.CharField(max_length=30, verbose_name="Mother's Name")),
                ('motherNo', models.CharField(max_length=15, verbose_name="Mother's Mobile")),
                ('fullAddress', models.CharField(max_length=50, verbose_name='Address')),
                ('pincode', models.CharField(max_length=6, verbose_name='Pincode')),
                ('nationality', models.CharField(max_length=15, verbose_name='Nationality')),
                ('planAfterGraduate', models.CharField(max_length=15, verbose_name='Future Plan')),
                ('sslcPer', models.FloatField(max_length=5, verbose_name='SSLC/10 Percent')),
                ('sslcYoP', models.CharField(max_length=4, verbose_name='SSLC/10 Year of Pass')),
                ('sslcBoard', models.CharField(max_length=35, verbose_name='SSLC/10 Board')),
                ('hsePer', models.CharField(max_length=5, verbose_name='HSE/12 Percent')),
                ('hseYoP', models.CharField(max_length=4, verbose_name='HSE/12 Year of Pass')),
                ('hseBoard', models.CharField(max_length=30, verbose_name='HSE/12 Board')),
                ('nameOfUG', models.CharField(max_length=10, verbose_name='UG Programme')),
                ('ugPer', models.CharField(max_length=5, verbose_name='UG Percent')),
                ('ugCgpa', models.CharField(max_length=5, verbose_name='UG CGPA')),
                ('ugYoP', models.CharField(max_length=4, verbose_name='UG Year of Pass')),
                ('collegeNameUg', models.CharField(max_length=50, verbose_name='UG College Name')),
                ('ugUniversity', models.CharField(max_length=50, verbose_name='UG University')),
                ('entranceRank', models.CharField(max_length=6, verbose_name='Entrance Rank')),
                ('mcaAggregateCgpa', models.CharField(max_length=4, verbose_name='PG CGPA')),
                ('activeArrears', models.CharField(max_length=2, verbose_name='Active Arrears (Count)')),
                ('historyOfArrears', models.CharField(max_length=2, verbose_name='Arrears History(Active + Cleared)')),
                ('examsNotAttended', models.CharField(max_length=2, verbose_name='Exam not Attended (Count)')),
                ('pgUniversity', models.CharField(default='APJ KTU', max_length=50, verbose_name='PG University')),
                ('technicalSkills', models.CharField(max_length=500)),
                ('certifications', models.CharField(max_length=500)),
                ('internships', models.CharField(max_length=500)),
                ('workExperience', models.CharField(max_length=500)),
                ('projectGithub', models.URLField(max_length=500, verbose_name='GitHub Profile URL')),
                ('linkedIn', models.URLField(max_length=500, verbose_name='LinkedIn Profile URL')),
                ('achievement', models.CharField(max_length=500)),
                ('languagesKnown', models.CharField(max_length=500)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='campus.studentreg')),
            ],
            options={
                'verbose_name_plural': 'STUDENT DETAILS',
            },
        ),
        migrations.CreateModel(
            name='BTechStudentDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch', models.CharField(choices=[('it', 'information_technology'), ('me', 'mech'), ('ce', 'civil'), ('eee', 'eee'), ('ece', 'ece'), ('ch', 'chemical'), ('cse', 'cse')], max_length=50)),
                ('DoB', models.DateField(max_length=10)),
                ('gender', models.CharField(choices=[('male', 'male'), ('female', 'female')], max_length=6)),
                ('mobileNoIndian', models.CharField(max_length=10)),
                ('alternativeNo', models.CharField(max_length=15)),
                ('collegeMail', models.CharField(max_length=200)),
                ('fatherName', models.CharField(max_length=50)),
                ('motherName', models.CharField(max_length=30)),
                ('motherNo', models.CharField(max_length=15)),
                ('fatherNo', models.CharField(max_length=15)),
                ('fullAddress', models.CharField(max_length=50)),
                ('pincode', models.CharField(max_length=6)),
                ('nationality', models.CharField(max_length=15)),
                ('planAfterGraduate', models.CharField(max_length=15)),
                ('sslcPer', models.FloatField(max_length=5)),
                ('sslcYoP', models.CharField(max_length=4)),
                ('sslcBoard', models.CharField(max_length=35)),
                ('hsePer', models.CharField(max_length=5)),
                ('hseYoP', models.CharField(max_length=4)),
                ('hseBoard', models.CharField(max_length=30)),
                ('ugUniversity', models.CharField(max_length=50)),
                ('entranceRank', models.CharField(max_length=6)),
                ('AggregateCgpa', models.CharField(max_length=4)),
                ('activeArrears', models.CharField(max_length=2)),
                ('historyOfArrears', models.CharField(max_length=2)),
                ('examsNotAttended', models.CharField(max_length=2)),
                ('technicalSkills', models.CharField(max_length=500)),
                ('certifications', models.CharField(max_length=500)),
                ('internships', models.CharField(max_length=500)),
                ('workExperience', models.CharField(max_length=500)),
                ('projectGithub', models.URLField(max_length=500)),
                ('linkedIn', models.URLField(max_length=500)),
                ('achievement', models.CharField(max_length=500)),
                ('languagesKnown', models.CharField(max_length=500)),
                ('admino', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='campus.studentreg')),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('is_correct', models.BooleanField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campus.question')),
            ],
            options={
                'verbose_name_plural': 'Answers',
            },
        ),
        migrations.CreateModel(
            name='Aiken_Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=100, verbose_name='student email')),
                ('score', models.CharField(default=0, max_length=3, verbose_name='Score')),
                ('quiz_name', models.CharField(max_length=255, verbose_name='Name of Quiz')),
                ('time', models.CharField(default=0, max_length=4, verbose_name='Time')),
                ('correct', models.CharField(default=0, max_length=3, verbose_name='correct')),
                ('wrong', models.CharField(default=0, max_length=3, verbose_name='Wrong')),
                ('percent', models.CharField(default=0, max_length=3, verbose_name='Percent')),
                ('total', models.CharField(default=0, max_length=3, verbose_name='total questions')),
                ('quiz_taken_on', models.DateTimeField(auto_now_add=True, verbose_name='Date & Time')),
                ('counter', models.IntegerField(default=0, verbose_name='counter')),
                ('quiz_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campus.quiz')),
            ],
            options={
                'verbose_name_plural': 'Aiken Quiz Result',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False)),
                ('is_tpo', models.BooleanField(default=False)),
                ('is_teacher', models.BooleanField(default=False)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=200)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
